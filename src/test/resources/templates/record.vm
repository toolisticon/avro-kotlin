#set ($ctx = $kotlincontextfactory.create($this,$schema))


#if ($schema.getNamespace())
package $ctx.namespace
#end

import org.apache.avro.specific.SpecificRecord
import org.apache.avro.Schema
import org.apache.avro.specific.AvroGenerated

#if ($schema.getDoc())
/**
 * $schema.getDoc()
 *
 * $ctx
 */
#end
@AvroGenerated
data class ${ctx.typeName} (
#foreach ($field in $schema.getFields())
  #if ($field.doc())
  /** $field.doc() */
  #end
  #foreach ($annotation in $this.javaAnnotations($field))
  @$annotation
  #end
  val ${this.mangle($field.name(), $schema.isError())}: ${this.javaUnbox($field.schema(), false)},
#end

) : SpecificRecord {
  companion object {
    val SCHEMA: Schema = Schema.Parser().parse(${ctx.schemaString})

    const val FINGERPRINT = ${ctx.fingerprint}L

    @JvmStatic
    private val serialVersionUID = FINGERPRINT
  }

  fun foo():String = TODO()


  override fun getSchema() = SCHEMA
  override fun get(fieldIndex: Int) : Any? = TODO("not implemented yet, used by DatumWriter, defined IndexedRecord.")
  override fun put(fieldIndex: Int, value:Any?) = TODO("not implemented yet, used by DatumReader, defined in IndexedRecord.")
}
