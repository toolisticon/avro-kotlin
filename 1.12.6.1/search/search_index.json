{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#why-should-i-use-this","title":"Why should I use this?","text":""},{"location":"index.html#how-to-start","title":"How to start?","text":"<p>We provide documentation for different people and different tasks. A good starting point is the Getting Started. You might want to look at Reference Guide.</p>"},{"location":"index.html#get-in-touch","title":"Get in touch","text":"<p>If you are missing a feature, have a question regarding usage or deployment, you should definitely get in touch with us. There are various ways to do so:</p> <p></p>"},{"location":"developer-guide/contribution.html","title":"Contribution","text":"<p>There are several ways in which you may contribute to this project.</p> <ul> <li>File issues</li> <li>Submit a pull requests</li> </ul>"},{"location":"developer-guide/contribution.html#found-a-bug-or-missing-feature","title":"Found a bug or missing feature?","text":"<p>Please file an issue in our issue tracking system.</p>"},{"location":"developer-guide/contribution.html#submit-a-pull-request","title":"Submit a Pull Request","text":"<p>If you found a solution to an open issue and implemented it, we would be happy to add your contribution in the code base. For doing so, please create a pull request. Prior to that, please make sure you:</p> <ul> <li>rebase against the <code>develop</code> branch</li> <li>stick to project coding conventions</li> <li>added test cases for the problem you are solving</li> <li>added docs, describing the change</li> <li>generally comply with codacy report</li> </ul>"},{"location":"developer-guide/project-setup.html","title":"Project Setup","text":"<p>If you are interested in developing and building the project please follow the following instruction.</p>"},{"location":"developer-guide/project-setup.html#version-control","title":"Version control","text":"<p>To get sources of the project, please execute:</p> <pre><code>git clone https://github.com/toolisticon/avro-kotlin.git\ncd camunda-bpm-taskpool\n</code></pre> <p>We are using gitflow in our git SCM. That means that you should start from <code>develop</code> branch, create a <code>feature/&lt;name&gt;</code> out of it and once it is completed create a pull request containing it. Please squash your commits before submitting and use semantic commit messages, if possible.</p>"},{"location":"developer-guide/project-setup.html#project-build","title":"Project Build","text":"<p>Perform the following steps to get a development setup up and running.</p> <pre><code>./mvnw clean install\n</code></pre>"},{"location":"developer-guide/project-setup.html#integration-tests","title":"Integration Tests","text":"<p>By default, the build command will ignore the run of <code>failsafe</code> Maven plugin executing the integration tests (usual JUnit tests with class names ending with ITest). In order to run integration tests, please call from your command line:</p> <pre><code>./mvnw integration-test failsafe:verify -Pitest\n</code></pre>"},{"location":"developer-guide/project-setup.html#build-documentation","title":"Build Documentation","text":"<p>We are using MkDocs for generation of a static site documentation and rely on Markdown as much as possible. MkDocs is written in Python 3 and needs to be installed on your machine. For the installation please run the following command from your command line:</p> <pre><code>python3 -m pip install --upgrade pip\npython3 -m pip install -r ./docs/requirements.txt\n</code></pre> <p>For creation of documentation, please run:</p> <pre><code>mkdocs build\n</code></pre> <p>The docs are generated into <code>site</code> directory.</p> <p>Note</p> <p>If you want to develop your docs in 'live' mode, run <code>mkdocs serve</code> and access the http://localhost:8000/ from your browser.</p>"},{"location":"developer-guide/project-setup.html#continuous-integration","title":"Continuous Integration","text":"<p>Travis CI is building all branches on commit hook. In addition, a private-hosted Jenkins CI is used to build the releases.</p>"},{"location":"developer-guide/project-setup.html#release-management","title":"Release Management","text":"<p>Release management has been set up for use of Sonatype Nexus (= Maven Central)</p>"},{"location":"developer-guide/project-setup.html#what-modules-get-deployed-to-repository","title":"What modules get deployed to repository","text":"<p>Every module is enabled by default. If you want to change this, please provide the property</p> <pre><code>&lt;maven.deploy.skip&gt;true&lt;/maven.deploy.skip&gt;\n</code></pre> <p>inside the corresponding <code>pom.xml</code>. Currently, all examples are EXCLUDED from publication into Maven Central.</p>"},{"location":"developer-guide/project-setup.html#trigger-new-release","title":"Trigger new release","text":"<p>Warning</p> <p>This operation requires special permissions.</p> <p>We use gitflow for development (see A successful git branching model for more details). You could use gitflow with native git commands, but then you would have to change the versions in the poms manually. Therefore, we use the mvn gitflow plugin, which handles this and other things nicely.</p> <p>You can build a release with:</p> <pre><code>./mvnw gitflow:release-start\n./mvnw gitflow:release-finish\n</code></pre> <p>This will update the versions in the <code>pom.xml</code> s accordingly and push the release tag to the <code>master</code> branch and update the <code>develop</code> branch for the new development version.</p>"},{"location":"developer-guide/project-setup.html#trigger-a-deploy","title":"Trigger a deploy","text":"<p>Warning</p> <p>This operation requires special permissions.</p> <p>Currently, CI allows for deployment of artifacts to Maven Central and is executed using github actions. This means, that a push to <code>master</code> branch will start the corresponding build job, and if successful the artifacts will get into <code>Staging Repositories</code> of OSS Sonatype without manual intervention.</p>"},{"location":"developer-guide/project-setup.html#run-deploy-from-local-machine","title":"Run deploy from local machine","text":"<p>Warning</p> <p>This operation requires special permissions.</p> <p>If you still want to execute the deployment from your local machine, you need to have GPG keys at place and to execute the following command on the <code>master</code> branch:</p> <pre><code>export GPG_KEYNAME=\"&lt;keyname&gt;\"\nexport GPG_PASSPHRASE=\"&lt;secret&gt;\"\n./mvnw clean deploy -B -DskipTests -DskipExamples -Prelease -Dgpg.keyname=$GPG_KEYNAME -Dgpg.passphrase=$GPG_PASSPHRASE\n</code></pre>"},{"location":"developer-guide/project-setup.html#release-to-public-repositories","title":"Release to public repositories","text":"<p>Warning</p> <p>This operation requires special permissions.</p> <p>The deployment job will publish the artifacts to Nexus OSS staging repositories. Currently, all snapshots get into OSS Sonatype Snapshot repository and all releases to Maven Central automatically.</p>"},{"location":"reference-guide/index.html","title":"Reference Guide","text":"<p>This reference guide is a primary source of information in order to understand how ...</p>"}]}